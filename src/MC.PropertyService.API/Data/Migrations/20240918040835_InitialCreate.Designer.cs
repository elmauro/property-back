// <auto-generated />
using System;
using MC.PropertyService.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MC.PropertyService.API.Data.Migrations
{
    [DbContext(typeof(PropertyDBContext))]
    [Migration("20240918040835_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("en_US.utf8")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MC.PropertyService.API.Data.Models.Owner", b =>
                {
                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OwnerId");

                    b.HasIndex("CreatedAt");

                    b.ToTable("Owners");

                    b.HasData(
                        new
                        {
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Address = "123 Main St, Springfield",
                            Birthday = new DateTime(1980, 5, 20, 5, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 448, DateTimeKind.Unspecified).AddTicks(231), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 448, DateTimeKind.Unspecified).AddTicks(234), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            Name = "John Doe",
                            Photo = "johndoe.jpg"
                        },
                        new
                        {
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Address = "456 Oak Ave, Springfield",
                            Birthday = new DateTime(1985, 3, 15, 5, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 448, DateTimeKind.Unspecified).AddTicks(242), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 448, DateTimeKind.Unspecified).AddTicks(243), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            Name = "Jane Smith",
                            Photo = "janesmith.jpg"
                        },
                        new
                        {
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Address = "789 Pine Rd, Springfield",
                            Birthday = new DateTime(1990, 11, 10, 5, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 448, DateTimeKind.Unspecified).AddTicks(248), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 448, DateTimeKind.Unspecified).AddTicks(248), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            Name = "Robert Brown",
                            Photo = "robertbrown.jpg"
                        });
                });

            modelBuilder.Entity("MC.PropertyService.API.Data.Models.Property", b =>
                {
                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodeInternal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("PropertyId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("OwnerId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000101"),
                            Address = "123 Country Road, Springfield",
                            CodeInternal = "GR12345",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(677), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(679), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            Name = "Green Acres",
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Price = 250000m,
                            Year = 2010
                        },
                        new
                        {
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000102"),
                            Address = "456 Beach Blvd, Springfield",
                            CodeInternal = "OV45678",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(685), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(686), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            Name = "Ocean View",
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Price = 450000m,
                            Year = 2015
                        },
                        new
                        {
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000103"),
                            Address = "789 Hilltop Dr, Springfield",
                            CodeInternal = "MR78910",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(690), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(691), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            Name = "Mountain Retreat",
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Price = 350000m,
                            Year = 2012
                        },
                        new
                        {
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000104"),
                            Address = "101 Downtown Ave, Springfield",
                            CodeInternal = "CL10111",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(695), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(695), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            Name = "City Lights",
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Price = 600000m,
                            Year = 2020
                        },
                        new
                        {
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000105"),
                            Address = "202 Suburb Ln, Springfield",
                            CodeInternal = "SD20222",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(700), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(701), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            Name = "Suburban Dream",
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Price = 300000m,
                            Year = 2005
                        },
                        new
                        {
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000106"),
                            Address = "303 City Center Rd, Springfield",
                            CodeInternal = "DL30333",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(716), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(717), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            Name = "Downtown Loft",
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Price = 450000m,
                            Year = 2018
                        },
                        new
                        {
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000107"),
                            Address = "404 Rural Dr, Springfield",
                            CodeInternal = "CE40444",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(721), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(721), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            Name = "Countryside Estate",
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Price = 700000m,
                            Year = 2017
                        },
                        new
                        {
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000108"),
                            Address = "505 Lakeside Rd, Springfield",
                            CodeInternal = "LH50555",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(727), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(728), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            Name = "Lakehouse",
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Price = 800000m,
                            Year = 2019
                        },
                        new
                        {
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000109"),
                            Address = "606 High Rise Blvd, Springfield",
                            CodeInternal = "PH60666",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(734), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(736), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            Name = "Penthouse Suite",
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Price = 950000m,
                            Year = 2021
                        },
                        new
                        {
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000110"),
                            Address = "707 Farm Ln, Springfield",
                            CodeInternal = "CC70777",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(740), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(740), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            Name = "Country Cottage",
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Price = 200000m,
                            Year = 2000
                        },
                        new
                        {
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000111"),
                            Address = "808 Palm Ave, Springfield",
                            CodeInternal = "LV80888",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(744), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(744), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            Name = "Luxury Villa",
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Price = 1200000m,
                            Year = 2022
                        },
                        new
                        {
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000112"),
                            Address = "909 River Rd, Springfield",
                            CodeInternal = "BB90999",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(748), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(749), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            Name = "Bungalow Bliss",
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Price = 275000m,
                            Year = 2008
                        },
                        new
                        {
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000113"),
                            Address = "1001 Woods Ln, Springfield",
                            CodeInternal = "FL101010",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(752), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(753), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            Name = "Forest Lodge",
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Price = 650000m,
                            Year = 2016
                        },
                        new
                        {
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000114"),
                            Address = "1102 Coastal Rd, Springfield",
                            CodeInternal = "SC111011",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(762), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(762), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            Name = "Seaside Cottage",
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Price = 300000m,
                            Year = 2011
                        },
                        new
                        {
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000115"),
                            Address = "1203 Metro Blvd, Springfield",
                            CodeInternal = "US121212",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(766), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(767), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            Name = "Urban Studio",
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Price = 350000m,
                            Year = 2014
                        },
                        new
                        {
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000116"),
                            Address = "1304 Valley Rd, Springfield",
                            CodeInternal = "HM131313",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(810), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(810), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            Name = "Hillside Manor",
                            OwnerId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Price = 500000m,
                            Year = 2023
                        });
                });

            modelBuilder.Entity("MC.PropertyService.API.Data.Models.PropertyImage", b =>
                {
                    b.Property<Guid>("PropertyImageId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Enabled")
                        .HasColumnType("integer");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid");

                    b.HasKey("PropertyImageId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImages");

                    b.HasData(
                        new
                        {
                            PropertyImageId = new Guid("00000000-0000-0000-0000-000000000101"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(6692), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            Enabled = 1,
                            File = "green_acres_1.jpg",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(6693), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000101")
                        },
                        new
                        {
                            PropertyImageId = new Guid("00000000-0000-0000-0000-000000000102"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(6698), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            Enabled = 1,
                            File = "ocean_view_1.jpg",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(6700), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000102")
                        },
                        new
                        {
                            PropertyImageId = new Guid("00000000-0000-0000-0000-000000000103"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(6703), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            Enabled = 1,
                            File = "mountain_retreat_1.jpg",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(6704), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000103")
                        },
                        new
                        {
                            PropertyImageId = new Guid("00000000-0000-0000-0000-000000000104"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(6707), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            Enabled = 1,
                            File = "city_lights_1.jpg",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(6707), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000104")
                        },
                        new
                        {
                            PropertyImageId = new Guid("00000000-0000-0000-0000-000000000105"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7313), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            Enabled = 1,
                            File = "suburban_dream_1.jpg",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7314), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000105")
                        },
                        new
                        {
                            PropertyImageId = new Guid("00000000-0000-0000-0000-000000000106"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7326), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            Enabled = 1,
                            File = "downtown_loft_1.jpg",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7327), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000106")
                        },
                        new
                        {
                            PropertyImageId = new Guid("00000000-0000-0000-0000-000000000107"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7330), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            Enabled = 1,
                            File = "countryside_estate_1.jpg",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7331), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000107")
                        },
                        new
                        {
                            PropertyImageId = new Guid("00000000-0000-0000-0000-000000000108"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7333), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            Enabled = 1,
                            File = "lakehouse_1.jpg",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7334), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000108")
                        },
                        new
                        {
                            PropertyImageId = new Guid("00000000-0000-0000-0000-000000000109"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7337), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            Enabled = 1,
                            File = "penthouse_suite_1.jpg",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7338), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000109")
                        },
                        new
                        {
                            PropertyImageId = new Guid("00000000-0000-0000-0000-000000000110"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7341), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            Enabled = 1,
                            File = "country_cottage_1.jpg",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7341), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000110")
                        },
                        new
                        {
                            PropertyImageId = new Guid("00000000-0000-0000-0000-000000000111"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7344), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            Enabled = 1,
                            File = "luxury_villa_1.jpg",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7345), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000111")
                        },
                        new
                        {
                            PropertyImageId = new Guid("00000000-0000-0000-0000-000000000112"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7348), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            Enabled = 1,
                            File = "bungalow_bliss_1.jpg",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7348), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000112")
                        },
                        new
                        {
                            PropertyImageId = new Guid("00000000-0000-0000-0000-000000000113"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7351), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            Enabled = 1,
                            File = "forest_lodge_1.jpg",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7352), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000113")
                        },
                        new
                        {
                            PropertyImageId = new Guid("00000000-0000-0000-0000-000000000114"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7358), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            Enabled = 1,
                            File = "seaside_cottage_1.jpg",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7358), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000114")
                        },
                        new
                        {
                            PropertyImageId = new Guid("00000000-0000-0000-0000-000000000115"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7361), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            Enabled = 1,
                            File = "urban_studio_1.jpg",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7362), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000115")
                        },
                        new
                        {
                            PropertyImageId = new Guid("00000000-0000-0000-0000-000000000116"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7364), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = "",
                            Enabled = 1,
                            File = "hillside_manor_1.jpg",
                            LastUpdatedAt = new DateTimeOffset(new DateTime(2024, 9, 18, 4, 8, 34, 449, DateTimeKind.Unspecified).AddTicks(7365), new TimeSpan(0, 0, 0, 0, 0)),
                            LastUpdatedBy = "",
                            PropertyId = new Guid("00000000-0000-0000-0000-000000000116")
                        });
                });

            modelBuilder.Entity("MC.PropertyService.API.Data.Models.PropertyTrace", b =>
                {
                    b.Property<Guid>("PropertyTraceId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateSale")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Tax")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("PropertyTraceId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyTraces");
                });

            modelBuilder.Entity("MC.PropertyService.API.Data.Models.Property", b =>
                {
                    b.HasOne("MC.PropertyService.API.Data.Models.Owner", "Owner")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MC.PropertyService.API.Data.Models.PropertyImage", b =>
                {
                    b.HasOne("MC.PropertyService.API.Data.Models.Property", "Property")
                        .WithMany("PropertyImages")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MC.PropertyService.API.Data.Models.PropertyTrace", b =>
                {
                    b.HasOne("MC.PropertyService.API.Data.Models.Property", "Property")
                        .WithMany("PropertyTraces")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MC.PropertyService.API.Data.Models.Owner", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("MC.PropertyService.API.Data.Models.Property", b =>
                {
                    b.Navigation("PropertyImages");

                    b.Navigation("PropertyTraces");
                });
#pragma warning restore 612, 618
        }
    }
}
